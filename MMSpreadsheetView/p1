 @property (nonatomic, assign) NSInteger gridRowCount;
 @property (nonatomic, assign) NSInteger gridColumnCount;
 @property (nonatomic, assign) BOOL isInitialized;
+@property (nonatomic, strong) NSMutableArray *widths;
 
 @end
 
@@ -35,13 +36,13 @@
     self = [super init];
     if (self) {
         _cellSpacing = 1.0f;
-        _itemSize = CGSizeMake(120.0f, 120.0f);
+        _itemHeight = 120;
     }
     return self;
 }
 
-- (void)setItemSize:(CGSize)itemSize {
-    _itemSize = CGSizeMake(itemSize.width + self.cellSpacing, itemSize.height + self.cellSpacing);
+- (void)setItemHeight:(float)itemHeight {
+    _itemHeight = itemHeight + self.cellSpacing;
     [self invalidateLayout];
 }
 
@@ -56,11 +57,18 @@
     self.gridColumnCount = [self.collectionView numberOfItemsInSection:0];
 
     if (!self.isInitialized) {
+               self.widths = [NSMutableArray array];
+
         id<UICollectionViewDelegateFlowLayout> delegate = (id)self.collectionView.delegate;
-        CGSize size = [delegate collectionView:self.collectionView
-                                        layout:self
-                        sizeForItemAtIndexPath:[NSIndexPath indexPathForItem:0 inSection:0]];
-        self.itemSize = size;
+
+               for (int i = 0; i < self.gridColumnCount; i++)
+               {
+                       CGSize size = [delegate collectionView:self.collectionView
+                                                                                       layout:self
+                                                       sizeForItemAtIndexPath:[NSIndexPath indexPathForItem:i inSection:0]];
+                       [self.widths addObject:@(size.width+self.cellSpacing)];
+                       self.itemHeight = size.height;
+               }
         self.isInitialized = YES;
     }
 }
@@ -69,16 +77,41 @@
     if (!self.isInitialized) {
         [self prepareLayout];
     }
-    CGSize size = CGSizeMake(self.gridColumnCount * self.itemSize.width, self.gridRowCount * self.itemSize.height);
+
+       float sumWidth = 0;
+       for (NSNumber *w in self.widths)
+               sumWidth += w.floatValue;
+
+
+    CGSize size = CGSizeMake(sumWidth, self.gridRowCount * self.itemHeight);
     return size;
 }
 
 - (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect {
     NSMutableArray *attributes = [NSMutableArray array];
-    NSUInteger startRow = floorf(rect.origin.y / self.itemSize.height);
-    NSUInteger startCol = floorf(rect.origin.x / self.itemSize.width);
-    NSUInteger endRow = MIN(self.gridRowCount - 1, ceilf(CGRectGetMaxY(rect) / self.itemSize.height));
-    NSUInteger endCol = MIN(self.gridColumnCount - 1, ceilf(CGRectGetMaxX(rect) / self.itemSize.width));
+    NSUInteger startRow = floorf(rect.origin.y / self.itemHeight);
+    NSUInteger endRow = MIN(self.gridRowCount - 1, ceilf(CGRectGetMaxY(rect) / self.itemHeight));
+
+
+       NSInteger startCol = -1;
+       NSInteger endCol = 0;
+       float widthsum = 0;
+       for (int i = 0; i < self.gridColumnCount; i++)
+       {
+               widthsum += [self.widths[i] floatValue];
+
+               if (widthsum > rect.origin.x && startCol < 0)
+                       startCol = i;
+
+               if (widthsum >= CGRectGetMaxX(rect))
+               {
+                       endCol = i+1;
+                       break;
+               }
+       }
+       endCol = MIN(self.gridColumnCount - 1, endCol);
+
+
     NSParameterAssert(self.gridRowCount > 0);
     NSParameterAssert(self.gridColumnCount > 0);
     
@@ -94,7 +127,15 @@
 
 - (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath {
     UICollectionViewLayoutAttributes *attributes = [UICollectionViewLayoutAttributes layoutAttributesForCellWithIndexPath:indexPath];
-    attributes.frame = CGRectMake(indexPath.item * self.itemSize.width, indexPath.section * self.itemSize.height, self.itemSize.width-self.cellSpacing, self.itemSize.height-self.cellSpacing);
+       float widthsum = 0;
+       for (int i = 0; i < indexPath.item; i++)
+               widthsum += [self.widths[i] floatValue];
+
+       CGRect frame = CGRectMake(widthsum, indexPath.section * self.itemHeight, [self.widths[indexPath.item] floatValue] - self.cellSpacing, self.itemHeight-self.cellSpacing);
+
+
+    attributes.frame = frame;
+
     return attributes;
 }
